@model Orchard.Fields.Fields.BooleanField
@using Orchard.Fields.Settings;
@{
    var settings = Model.PartFieldDefinition.Settings.GetModel<BooleanFieldSettings>();
}
<div class="form-group">
    <label for="@Html.FieldIdFor(m => m.Value)" class="control-label">@Model.DisplayName</label>
    <div class="controls">
        @switch (settings.SelectionMode) {
            case SelectionMode.Checkbox:
                <label class="checkbox" for="@(Html.FieldIdFor(m => m.Value))" >
                    <input type="checkbox" id="@(Html.FieldIdFor(m => m.Value))" value="true" name="@Html.FieldNameFor(m => m.Value)" @if(Model.Value.HasValue && Model.Value.Value) { <text>checked="checked"</text> } /><input name="@Html.FieldNameFor(m => m.Value)" type="hidden" value="false" /> 
                    @T(settings.OnLabel)
                </label>
                break;
            case SelectionMode.Radiobutton:
                if (settings.Optional) {
                    <label for="radio-unknown" class="radio">
                        <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-unknown" value="" @if(!Model.Value.HasValue) { <text>checked="checked"</text> } />
                        @T(settings.NotSetLabel)
                    </label>
                }
                <label for="radio-true" class="radio">
                    <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-true" value="true" @if (Model.Value.HasValue && Model.Value.Value) { <text>checked="checked"</text> } />
                    @T(settings.OnLabel)
                </label>
                <label for="radio-false" class="radio">
                    <input type="radio" name="@Html.FieldNameFor(m => m.Value)" id="radio-false" value="false" @if (Model.Value.HasValue && !Model.Value.Value) { <text>checked="checked"</text> } />
                    @T(settings.OffLabel)
                </label>
                break;
            case SelectionMode.Dropdown:   
                <select id="@(Html.FieldIdFor(m => m.Value) + "-dropdown")" name="@Html.FieldNameFor(m => m.Value)">
                    @if (settings.Optional) {
                        @Html.SelectOption("", !Model.Value.HasValue, T(settings.NotSetLabel).ToString())
                    }
                    @Html.SelectOption("true", (Model.Value.HasValue && Model.Value.Value), T(settings.OnLabel).ToString())
                    @Html.SelectOption("false", (Model.Value.HasValue && !Model.Value.Value), T(settings.OffLabel).ToString())
                </select> 
                break;
            default:
                break;
        }
        @Html.ValidationMessageFor(m => m.Value)
        <span class="hint">@settings.Hint</span>
    </div>
</div>

