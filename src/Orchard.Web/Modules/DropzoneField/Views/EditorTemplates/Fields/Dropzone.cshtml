@model DropzoneField.ViewModels.DropzoneFieldViewModel

@{
    Script.Include("dropzone.min.js");
    Style.Include("dropzone.min.css");
}

<div class="border p-3">
    <div class="form-group">
        <label class="control-label">@Model.Field.DisplayName</label>
        <div id="dropzoneContainer" class="dropzone"></div>
    </div>
</div>
@Html.HiddenFor(model => model.Field.FileNames)

@using (Script.Foot())
{
    <script type="text/javascript">
    //<![CDATA[

    Dropzone.autoDiscover = false;


        $(function () {

            var $filenamesInput = $("#@(Html.FieldIdFor(x => x.Field.FileNames))");
            var images = $filenamesInput .val().split(";");

            $("#dropzoneContainer").dropzone({
                url: '@Url.Action("Upload", "Dropzone", new { area = "DropzoneField" })',
                thumbnailWidth: 170,
                thumbnailHeight: 170,
                resizeWidth: @Model.Settings.MaxWidth,
                maxFiles: @Model.Settings.FileLimit,
                acceptedFiles: 'image/gif,image/jpeg,image/png,image/svg+xml',
                addRemoveLinks: true,
                dictDefaultMessage: "Click or drop image files here (limit @Model.Settings.FileLimit)",
                init: function () {
                    var self = this;
                    this.on("sending", function (file, xhr, formData) {
                        formData.append("__RequestVerificationToken", "@(Html.AntiForgeryTokenValueOrchard())");
                        formData.append("dropzoneMediaFolder", "@(Model.DropzoneMediaFolder)");
                    });
                    this.on("success", function (file) {
                        var newVal = file.xhr.responseText;
                        var val = $filenamesInput.val();
                        if (val !== "")
                            val += ";";
                        val += newVal;
                        $filenamesInput.val(val);
                        file.uploadedName = newVal;
                    });
                    this.on("removedfile", function (file) {
                        $filenamesInput.val($.grep($filenamesInput.val().split(';'), function (fileName) { return fileName !== file.dataURL; }).join(';'));
                    });
                    this.on("maxfilesexceeded", function (file) {
                        this.removeFile(file);
                    });
                    for (var i = 0; i < images.length; i++) {
                        let image = images[i];
                        if (image === "")
                            continue;

                        let imagePathComps = image.split("/");
                        let filename = imagePathComps[imagePathComps.length - 1];
                        let mockFile = { name: filename, size: 1, dataURL: image };
                        this.emit("addedfile", mockFile);
                        this.createThumbnailFromUrl(mockFile,
                            this.options.thumbnailWidth, this.options.thumbnailHeight,
                            this.options.thumbnailMethod, true, function (thumbnail) {
                                self.emit('thumbnail', mockFile, thumbnail);
                            });
                        this.emit("complete", mockFile);
                    }
                }
            });
        })

    //]]>
    </script>
}
