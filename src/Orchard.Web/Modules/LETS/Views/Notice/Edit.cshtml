@using LETS.ViewModels
@using LETS.Helpers
@{
    Layout.Title = T("Edit Notice").ToString();
    var noticeCategoryVM = (NoticeCategoryViewModel)Model.NoticeCategoryViewModel;
    var isPublished = (bool)Model.IsPublished;
    HtmlHelper.ClientValidationEnabled = true;
    HtmlHelper.UnobtrusiveJavaScriptEnabled = true;
}

@using (Html.BeginFormAntiForgeryPost(new { @class = "needs-validation", novalidate = "novalidate" }))
{
    Html.ValidationSummary();

    <div id="editNotice" class="edit-create-notice">
        <header class="page-header">
            <h1>You are editing your notice</h1>
        </header>
        <div class="border border-bottom-0 p-3">
            <div class="form-group">
                <label class="required">@T("Category")</label>
                @Html.DropDownListFor(m => noticeCategoryVM.IdCategory, noticeCategoryVM.Categories, "Choose a category...", new { autofocus = "autofocus", @class = "form-control custom-select", required = "required" })
                <div class="invalid-feedback">
                    @Html.ValidationMessageFor(m => noticeCategoryVM.IdCategory)
                </div>
            </div>
        </div>
        @Display(Model)

        <div class="form-actions mt-3">
            @if (!isPublished)
            {
                <button class="btn btn-primary btn-large" type="submit" value="submit.Save" name="submit.Save">@T("Save &amp; Publish")</button>
            }
            else
            {
                <button class="btn btn-primary btn-large" type="submit" value="submit.Save" name="submit.Save">@T("Save")</button>
            }
            <p class="float-right">
                @if (isPublished)
                {
                    <button class="btn btn-warning cancel" type="submit" value="submit.Unpublish" name="submit.Unpublish">@T("Archive")</button>
                }
                <button class="btn btn-danger cancel" type="submit" value="submit.Delete" name="submit.Delete">@T("Delete")</button>
            </p>
        </div>
    </div>

}