@using LETS.Helpers;
@model LETS.ViewModels.MemberNoticesViewModel

<h1>@string.Format("{0}'s {1}", @Model.Member.FirstLastName, T("notices"))</h1>
@if (Model.Notices.Count().Equals(0))
{
    <p>@T("This member doesn't have any active notices")</p>
}
@foreach (var notice in Model.Notices)
{
    var id = notice.ContentItem.Id;
    @Display(notice)
    @Html.ActionLink(T("Edit").ToString(), "Edit", "Notice", new { area = "LETS", id = id }, new { @class = "edit" }) @:|
    @Html.ActionLink(T("Delete").ToString(), "Delete", "Notice", new { area = "LETS", id = id }, new { @class = "edit", itemprop = "UnsafeUrl RemoveUrl" }) @:|
    @*var published = Helpers.IsPublished(notice.ContentPart.Id);
        if (published)
        {
            @Html.Link(T("Archive").Text, Url.Action("Unpublish", "Notice", new { area = "LETS", id = notice.Id }), new { @class = "edit", itemprop = "UnsafeUrl ArchiveUrl" })
        }
        else
        {
            @Html.ActionLink(T("Publish").ToString(), "Publish", "Notice", new { area = "LETS", id = notice.Id }, new { @class = "edit", itemprop = "UnsafeUrl" })
        }*@
}
@{
    <div id="archivedNotices">
        <h2>@T("Archived notices")</h2>
        <p><strong>@T("Expired notices will show up here until they are deleted or re-activated by publishing them.")</strong></p>
        <p>@T("Notices can also be archived if you don't want to delete them yet")</p>
        @if (Model.ArchivedNotices.Any())
        {
            foreach (var archivedNotice in Model.ArchivedNotices)
            {
                @Display(archivedNotice)
            }
        }
    </div>
}

@Html.AntiForgeryTokenOrchard()
